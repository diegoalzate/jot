// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Username  string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIdentity = `-- name: GetIdentity :one
SELECT id, user_id, provider
FROM identities
WHERE provider_id = $1 AND provider = $2
`

type GetIdentityParams struct {
	ProviderID string
	Provider   string
}

type GetIdentityRow struct {
	ID       uuid.UUID
	UserID   uuid.NullUUID
	Provider string
}

func (q *Queries) GetIdentity(ctx context.Context, arg GetIdentityParams) (GetIdentityRow, error) {
	row := q.db.QueryRowContext(ctx, getIdentity, arg.ProviderID, arg.Provider)
	var i GetIdentityRow
	err := row.Scan(&i.ID, &i.UserID, &i.Provider)
	return i, err
}
